{"ast":null,"code":"var _jsxFileName = \"/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport { cloneDeep, uniq } from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetail from \"./components/PlayDetail.js\";\nimport About from \"./components/About.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plays: [],\n      currentPlay: null,\n      filteredPlays: [],\n      filters: {},\n      favourites: []\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.plays.length) {\n      try {\n        const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({\n          plays: data\n        });\n      } catch {\n        console.error(\"fetch error\");\n      }\n    }\n  }\n\n  render() {\n    //constants\n    const genres = [\"\"];\n    genres.push(...uniq(this.state.plays.map(p => p.genre))); //methods\n\n    const setCurrentPlay = play => {\n      this.setState({\n        currentPlay: play\n      });\n    };\n\n    const setFilters = (name, value) => {\n      var filtersCopy;\n\n      if (name && value) {\n        filtersCopy = { ...this.state.filters\n        };\n        filtersCopy[name] = value;\n      } else {\n        filtersCopy = {};\n      }\n\n      this.setState({\n        filters: filtersCopy\n      });\n    };\n\n    const setFilteredPlays = () => {\n      const filters = this.state.filters;\n      var filteredPlays = cloneDeep(this.state.plays);\n\n      if (filters.title) {\n        filteredPlays = filteredPlays.filter(p => p.title.toLowerCase().includes(filters.title.toLowerCase()));\n      }\n\n      if (filters.before === \"on\" && filters.beforeYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate < filters.beforeYear);\n      }\n\n      if (filters.after === \"on\" && filters.afterYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate > filters.afterYear);\n      }\n\n      if (filters.genre) {\n        filteredPlays = filteredPlays.filter(p => p.genre === filters.genre);\n      }\n\n      this.setState({\n        filteredPlays: filteredPlays\n      });\n    };\n\n    const addToFavourites = play => {\n      const favouritesCopy = [...this.state.favourites]; //prevent duplicates from being added\n\n      if (!favouritesCopy.find(p => p.id === play.id)) {\n        favouritesCopy.push(play);\n      }\n\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const removeFromFavourites = play => {\n      const favouritesCopy = [...this.state.favourites];\n      const index = favouritesCopy.findIndex(p => p.id === play.id);\n      favouritesCopy.splice(index, 1);\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          setFilteredPlays: setFilteredPlays\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-list\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayList, {\n          plays: this.state.filteredPlays,\n          favourites: this.state.favourites,\n          filters: this.state.filters,\n          setFilters: setFilters,\n          setFilteredPlays: setFilteredPlays,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          setCurrentPlay: setCurrentPlay,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-detail\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayDetail, {\n          play: this.state.currentPlay,\n          favourites: this.state.favourites,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js"],"names":["React","Route","cloneDeep","uniq","Header","Home","PlayList","PlayDetail","About","App","Component","constructor","props","state","plays","currentPlay","filteredPlays","filters","favourites","componentDidMount","length","url","response","fetch","data","json","setState","console","error","render","genres","push","map","p","genre","setCurrentPlay","play","setFilters","name","value","filtersCopy","setFilteredPlays","title","filter","toLowerCase","includes","before","beforeYear","likelyDate","after","afterYear","addToFavourites","favouritesCopy","find","id","removeFromFavourites","index","findIndex","splice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport {cloneDeep, uniq} from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetail from \"./components/PlayDetail.js\";\nimport About from \"./components/About.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {plays: [],\n                      currentPlay: null,\n                      filteredPlays: [],\n                      filters: {},\n                      favourites: []};\n    }\n                            \n    async componentDidMount() {\n        if (!this.state.plays.length) {\n            try {\n                const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n                const response = await fetch(url);\n                const data = await response.json();\n                this.setState({plays: data});\n            } \n            catch {\n                console.error(\"fetch error\");\n            }\n        }\n    }\n    \n    render() {\n        //constants\n        const genres = [\"\"];\n        genres.push(...uniq(this.state.plays.map((p) => p.genre)));\n              \n        //methods\n        const setCurrentPlay = (play) => {\n            this.setState({currentPlay: play});\n        }\n        \n        const setFilters = (name, value) => {\n            var filtersCopy;\n            \n            if (name && value) {\n                filtersCopy = {...this.state.filters};\n                filtersCopy[name] = value;\n            }\n            else {\n                filtersCopy = {};\n            }\n            \n            this.setState({filters: filtersCopy});\n        }\n        \n        const setFilteredPlays = () => {\n            const filters = this.state.filters;\n            var filteredPlays = cloneDeep(this.state.plays);\n            \n            if (filters.title) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.title.toLowerCase().includes(filters.title.toLowerCase()));\n            }\n            \n            if ((filters.before === \"on\") && filters.beforeYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate < filters.beforeYear);\n            }\n            \n            if ((filters.after === \"on\") && filters.afterYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate > filters.afterYear);\n            }\n            \n            if (filters.genre) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.genre === filters.genre);\n            }\n            \n            this.setState({filteredPlays: filteredPlays});\n        }\n        \n        const addToFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            \n            //prevent duplicates from being added\n            if (!favouritesCopy.find((p) => p.id === play.id)) {\n                favouritesCopy.push(play);\n            }\n            \n            this.setState({favourites:favouritesCopy});\n        }\n        \n        const removeFromFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            const index = favouritesCopy.findIndex((p) => p.id === play.id);\n            favouritesCopy.splice(index, 1);\n            this.setState({favourites:favouritesCopy});\n        }\n        \n        return (\n            <div className=\"App\">\n                <Route path=\"/\" exact><Home setFilteredPlays={setFilteredPlays}/></Route>\n                <Route path=\"/play-list\" exact>\n                    <Header/>\n                    <PlayList plays={this.state.filteredPlays}\n                              favourites={this.state.favourites}\n                              filters={this.state.filters}\n                              setFilters={setFilters}\n                              setFilteredPlays={setFilteredPlays} \n                              addToFavourites={addToFavourites}\n                              removeFromFavourites={removeFromFavourites}\n                              setCurrentPlay={setCurrentPlay}\n                              genres={genres}/>\n                </Route>\n                <Route path=\"/play-detail\" exact>\n                    <Header/>\n                    <PlayDetail play={this.state.currentPlay}\n                                 favourites={this.state.favourites}\n                                 addToFavourites={addToFavourites}\n                                 removeFromFavourites={removeFromFavourites}/>\n                </Route>\n                <Route path=\"/about\" exact><About/></Route>\n            </div>\n        );                \n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}