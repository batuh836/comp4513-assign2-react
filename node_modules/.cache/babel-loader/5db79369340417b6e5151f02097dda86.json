{"ast":null,"code":"var _jsxFileName = \"/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport { cloneDeep, uniq } from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plays: [],\n      currentPlay: null,\n      filteredPlays: [],\n      filters: {\n        title: \"\",\n        before: \"off\",\n        beforeYear: \"\",\n        after: \"off\",\n        afterYear: \"\",\n        genre: \"\"\n      },\n      favourites: [],\n      playData: []\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.plays.length) {\n      try {\n        const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({\n          plays: data\n        });\n      } catch {\n        console.error(\"fetch error\");\n      }\n    }\n  }\n\n  render() {\n    //constants\n    const genres = [\"\"];\n    genres.push(...uniq(this.state.plays.map(p => p.genre))); //methods\n\n    const setCurrentPlay = play => {\n      this.setState({\n        currentPlay: play\n      });\n    };\n\n    const setFilters = (name, value) => {\n      var filtersCopy;\n\n      if (name && value) {\n        filtersCopy = { ...this.state.filters\n        };\n        filtersCopy[name] = value;\n      } else {\n        filtersCopy = {\n          title: \"\",\n          before: \"off\",\n          beforeYear: \"\",\n          after: \"off\",\n          afterYear: \"\",\n          genre: \"\"\n        };\n      }\n\n      console.log(name, value);\n      this.setState({\n        filters: filtersCopy\n      });\n    };\n\n    const setFilteredPlays = orderType => {\n      const filters = this.state.filters;\n      var filteredPlays = cloneDeep(this.state.plays); //filter by title\n\n      if (filters.title) {\n        filteredPlays = filteredPlays.filter(p => p.title.toLowerCase().includes(filters.title.toLowerCase()));\n      } //filter by beforeYear\n\n\n      if (filters.before === \"on\" && filters.beforeYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate < filters.beforeYear);\n      } //filter by afterYear\n\n\n      if (filters.after === \"on\" && filters.afterYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate > filters.afterYear);\n      } //filter by genre\n\n\n      if (filters.genre) {\n        filteredPlays = filteredPlays.filter(p => p.genre === filters.genre);\n      } //order filtered plays\n\n\n      if (orderType) {\n        if (orderType === \"title\") {\n          filteredPlays = filteredPlays.sort((a, b) => a.title.toLowerCase() > b.title.toLowerCase());\n        } else if (orderType === \"year\") {\n          filteredPlays = filteredPlays.sort((a, b) => Number(a.likelyDate) - Number(b.likelyDate));\n        }\n      }\n\n      this.setState({\n        filteredPlays: filteredPlays\n      });\n    };\n\n    const addToFavourites = play => {\n      const favouritesCopy = [...this.state.favourites]; //prevent duplicates from being added\n\n      if (!favouritesCopy.find(p => p.id === play.id)) {\n        favouritesCopy.push(play);\n      }\n\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const removeFromFavourites = play => {\n      const favouritesCopy = [...this.state.favourites];\n      const index = favouritesCopy.findIndex(p => p.id === play.id);\n      favouritesCopy.splice(index, 1);\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const savePlayData = (play, data) => {\n      const playDataCopy = cloneDeep(this.state.playData);\n      playDataCopy.push({\n        id: play.id,\n        data: data\n      });\n      this.setState({\n        playData: playDataCopy\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          setFilters: setFilters,\n          setFilteredPlays: setFilteredPlays\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-list\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayList, {\n          plays: this.state.filteredPlays,\n          favourites: this.state.favourites,\n          filters: this.state.filters,\n          setFilters: setFilters,\n          setFilteredPlays: setFilteredPlays,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          setCurrentPlay: setCurrentPlay,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-detail\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayDetailApp, {\n          play: this.state.currentPlay,\n          playData: this.state.playData,\n          favourites: this.state.favourites,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          savePlayData: savePlayData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js"],"names":["React","Route","cloneDeep","uniq","Header","Home","PlayList","PlayDetailApp","About","App","Component","constructor","props","state","plays","currentPlay","filteredPlays","filters","title","before","beforeYear","after","afterYear","genre","favourites","playData","componentDidMount","length","url","response","fetch","data","json","setState","console","error","render","genres","push","map","p","setCurrentPlay","play","setFilters","name","value","filtersCopy","log","setFilteredPlays","orderType","filter","toLowerCase","includes","likelyDate","sort","a","b","Number","addToFavourites","favouritesCopy","find","id","removeFromFavourites","index","findIndex","splice","savePlayData","playDataCopy"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,SAAR,EAAmBC,IAAnB,QAA8B,QAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE,EAAR;AACCC,MAAAA,WAAW,EAAE,IADd;AAECC,MAAAA,aAAa,EAAE,EAFhB;AAGCC,MAAAA,OAAO,EAAE;AAACC,QAAAA,KAAK,EAAE,EAAR;AAAYC,QAAAA,MAAM,EAAE,KAApB;AAA2BC,QAAAA,UAAU,EAAE,EAAvC;AAA2CC,QAAAA,KAAK,EAAE,KAAlD;AAAyDC,QAAAA,SAAS,EAAE,EAApE;AAAwEC,QAAAA,KAAK,EAAE;AAA/E,OAHV;AAICC,MAAAA,UAAU,EAAE,EAJb;AAKCC,MAAAA,QAAQ,EAAE;AALX,KAAb;AAMH;;AAEsB,QAAjBC,iBAAiB,GAAG;AACtB,QAAI,CAAC,KAAKb,KAAL,CAAWC,KAAX,CAAiBa,MAAtB,EAA8B;AAC1B,UAAI;AACA,cAAMC,GAAG,GAAG,sEAAZ;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,cAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,aAAKC,QAAL,CAAc;AAACnB,UAAAA,KAAK,EAAEiB;AAAR,SAAd;AACH,OALD,CAMA,MAAM;AACFG,QAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACH;AACJ;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAMC,MAAM,GAAG,CAAC,EAAD,CAAf;AACAA,IAAAA,MAAM,CAACC,IAAP,CAAY,GAAGnC,IAAI,CAAC,KAAKU,KAAL,CAAWC,KAAX,CAAiByB,GAAjB,CAAsBC,CAAD,IAAOA,CAAC,CAACjB,KAA9B,CAAD,CAAnB,EAHK,CAKL;;AACA,UAAMkB,cAAc,GAAIC,IAAD,IAAU;AAC7B,WAAKT,QAAL,CAAc;AAAClB,QAAAA,WAAW,EAAE2B;AAAd,OAAd;AACH,KAFD;;AAIA,UAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,UAAIC,WAAJ;;AAEA,UAAIF,IAAI,IAAIC,KAAZ,EAAmB;AACfC,QAAAA,WAAW,GAAG,EAAC,GAAG,KAAKjC,KAAL,CAAWI;AAAf,SAAd;AACA6B,QAAAA,WAAW,CAACF,IAAD,CAAX,GAAoBC,KAApB;AACH,OAHD,MAIK;AACDC,QAAAA,WAAW,GAAG;AAAC5B,UAAAA,KAAK,EAAC,EAAP;AAAWC,UAAAA,MAAM,EAAC,KAAlB;AAAyBC,UAAAA,UAAU,EAAC,EAApC;AAAwCC,UAAAA,KAAK,EAAC,KAA9C;AAAqDC,UAAAA,SAAS,EAAC,EAA/D;AAAmEC,UAAAA,KAAK,EAAC;AAAzE,SAAd;AACH;;AAEDW,MAAAA,OAAO,CAACa,GAAR,CAAYH,IAAZ,EAAkBC,KAAlB;AACA,WAAKZ,QAAL,CAAc;AAAChB,QAAAA,OAAO,EAAE6B;AAAV,OAAd;AACH,KAbD;;AAeA,UAAME,gBAAgB,GAAIC,SAAD,IAAe;AACpC,YAAMhC,OAAO,GAAG,KAAKJ,KAAL,CAAWI,OAA3B;AACA,UAAID,aAAa,GAAGd,SAAS,CAAC,KAAKW,KAAL,CAAWC,KAAZ,CAA7B,CAFoC,CAIpC;;AACA,UAAIG,OAAO,CAACC,KAAZ,EAAmB;AACfF,QAAAA,aAAa,GAAGA,aAAa,CAACkC,MAAd,CAAsBV,CAAD,IACjBA,CAAC,CAACtB,KAAF,CAAQiC,WAAR,GAAsBC,QAAtB,CAA+BnC,OAAO,CAACC,KAAR,CAAciC,WAAd,EAA/B,CADJ,CAAhB;AAEH,OARmC,CAUpC;;;AACA,UAAKlC,OAAO,CAACE,MAAR,KAAmB,IAApB,IAA6BF,OAAO,CAACG,UAAzC,EAAqD;AACjDJ,QAAAA,aAAa,GAAGA,aAAa,CAACkC,MAAd,CAAsBV,CAAD,IACjBA,CAAC,CAACa,UAAF,GAAepC,OAAO,CAACG,UAD3B,CAAhB;AAEH,OAdmC,CAgBpC;;;AACA,UAAKH,OAAO,CAACI,KAAR,KAAkB,IAAnB,IAA4BJ,OAAO,CAACK,SAAxC,EAAmD;AAC/CN,QAAAA,aAAa,GAAGA,aAAa,CAACkC,MAAd,CAAsBV,CAAD,IACjBA,CAAC,CAACa,UAAF,GAAepC,OAAO,CAACK,SAD3B,CAAhB;AAEH,OApBmC,CAsBpC;;;AACA,UAAIL,OAAO,CAACM,KAAZ,EAAmB;AACfP,QAAAA,aAAa,GAAGA,aAAa,CAACkC,MAAd,CAAsBV,CAAD,IACjBA,CAAC,CAACjB,KAAF,KAAYN,OAAO,CAACM,KADxB,CAAhB;AAEH,OA1BmC,CA4BpC;;;AACA,UAAI0B,SAAJ,EAAe;AACX,YAAIA,SAAS,KAAK,OAAlB,EAA2B;AACvBjC,UAAAA,aAAa,GAAGA,aAAa,CAACsC,IAAd,CAAmB,CAACC,CAAD,EAAGC,CAAH,KACfD,CAAC,CAACrC,KAAF,CAAQiC,WAAR,KAAwBK,CAAC,CAACtC,KAAF,CAAQiC,WAAR,EAD5B,CAAhB;AAEH,SAHD,MAIK,IAAIF,SAAS,KAAK,MAAlB,EAA0B;AAC3BjC,UAAAA,aAAa,GAAGA,aAAa,CAACsC,IAAd,CAAmB,CAACC,CAAD,EAAGC,CAAH,KACfC,MAAM,CAACF,CAAC,CAACF,UAAH,CAAN,GAAuBI,MAAM,CAACD,CAAC,CAACH,UAAH,CADjC,CAAhB;AAEH;AACJ;;AAED,WAAKpB,QAAL,CAAc;AAACjB,QAAAA,aAAa,EAAEA;AAAhB,OAAd;AACH,KAzCD;;AA2CA,UAAM0C,eAAe,GAAIhB,IAAD,IAAU;AAC9B,YAAMiB,cAAc,GAAG,CAAC,GAAG,KAAK9C,KAAL,CAAWW,UAAf,CAAvB,CAD8B,CAG9B;;AACA,UAAI,CAACmC,cAAc,CAACC,IAAf,CAAqBpB,CAAD,IAAOA,CAAC,CAACqB,EAAF,KAASnB,IAAI,CAACmB,EAAzC,CAAL,EAAmD;AAC/CF,QAAAA,cAAc,CAACrB,IAAf,CAAoBI,IAApB;AACH;;AAED,WAAKT,QAAL,CAAc;AAACT,QAAAA,UAAU,EAACmC;AAAZ,OAAd;AACH,KATD;;AAWA,UAAMG,oBAAoB,GAAIpB,IAAD,IAAU;AACnC,YAAMiB,cAAc,GAAG,CAAC,GAAG,KAAK9C,KAAL,CAAWW,UAAf,CAAvB;AACA,YAAMuC,KAAK,GAAGJ,cAAc,CAACK,SAAf,CAA0BxB,CAAD,IAAOA,CAAC,CAACqB,EAAF,KAASnB,IAAI,CAACmB,EAA9C,CAAd;AACAF,MAAAA,cAAc,CAACM,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B;AACA,WAAK9B,QAAL,CAAc;AAACT,QAAAA,UAAU,EAACmC;AAAZ,OAAd;AACH,KALD;;AAOA,UAAMO,YAAY,GAAG,CAACxB,IAAD,EAAOX,IAAP,KAAgB;AACjC,YAAMoC,YAAY,GAAGjE,SAAS,CAAC,KAAKW,KAAL,CAAWY,QAAZ,CAA9B;AACA0C,MAAAA,YAAY,CAAC7B,IAAb,CAAkB;AAACuB,QAAAA,EAAE,EAAEnB,IAAI,CAACmB,EAAV;AAAc9B,QAAAA,IAAI,EAAEA;AAApB,OAAlB;AACA,WAAKE,QAAL,CAAc;AAACR,QAAAA,QAAQ,EAAE0C;AAAX,OAAd;AACH,KAJD;;AAMA,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAA,+BAAsB,QAAC,IAAD;AAAM,UAAA,UAAU,EAAExB,UAAlB;AAA8B,UAAA,gBAAgB,EAAEK;AAAhD;AAAA;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,KAAK,MAA9B;AAAA,gCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,QAAD;AAAU,UAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWG,aAA5B;AACU,UAAA,UAAU,EAAE,KAAKH,KAAL,CAAWW,UADjC;AAEU,UAAA,OAAO,EAAE,KAAKX,KAAL,CAAWI,OAF9B;AAGU,UAAA,UAAU,EAAE0B,UAHtB;AAIU,UAAA,gBAAgB,EAAEK,gBAJ5B;AAKU,UAAA,eAAe,EAAEU,eAL3B;AAMU,UAAA,oBAAoB,EAAEI,oBANhC;AAOU,UAAA,cAAc,EAAErB,cAP1B;AAQU,UAAA,MAAM,EAAEJ;AARlB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAcI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,cAAZ;AAA2B,QAAA,KAAK,MAAhC;AAAA,gCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AAAe,UAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWE,WAAhC;AACe,UAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWY,QADpC;AAEe,UAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWW,UAFtC;AAGe,UAAA,eAAe,EAAEkC,eAHhC;AAIe,UAAA,oBAAoB,EAAEI,oBAJrC;AAKe,UAAA,YAAY,EAAEI;AAL7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eAuBI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,MAA1B;AAAA,+BAA2B,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA2BH;;AAhJ6B;;AAmJlC,eAAezD,GAAf","sourcesContent":["import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport {cloneDeep, uniq} from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {plays: [],\n                      currentPlay: null,\n                      filteredPlays: [],\n                      filters: {title: \"\", before: \"off\", beforeYear: \"\", after: \"off\", afterYear: \"\", genre: \"\"},\n                      favourites: [],\n                      playData: []};\n    }\n                            \n    async componentDidMount() {\n        if (!this.state.plays.length) {\n            try {\n                const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n                const response = await fetch(url);\n                const data = await response.json();\n                this.setState({plays: data});\n            } \n            catch {\n                console.error(\"fetch error\");\n            }\n        }\n    }\n    \n    render() {\n        //constants\n        const genres = [\"\"];\n        genres.push(...uniq(this.state.plays.map((p) => p.genre)));\n              \n        //methods\n        const setCurrentPlay = (play) => {\n            this.setState({currentPlay: play});\n        }\n        \n        const setFilters = (name, value) => {\n            var filtersCopy;\n            \n            if (name && value) {\n                filtersCopy = {...this.state.filters};\n                filtersCopy[name] = value;\n            }\n            else {\n                filtersCopy = {title:\"\", before:\"off\", beforeYear:\"\", after:\"off\", afterYear:\"\", genre:\"\"};\n            }\n            \n            console.log(name, value);\n            this.setState({filters: filtersCopy});\n        }\n        \n        const setFilteredPlays = (orderType) => {\n            const filters = this.state.filters;\n            var filteredPlays = cloneDeep(this.state.plays);\n            \n            //filter by title\n            if (filters.title) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.title.toLowerCase().includes(filters.title.toLowerCase()));\n            }\n            \n            //filter by beforeYear\n            if ((filters.before === \"on\") && filters.beforeYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate < filters.beforeYear);\n            }\n            \n            //filter by afterYear\n            if ((filters.after === \"on\") && filters.afterYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate > filters.afterYear);\n            }\n            \n            //filter by genre\n            if (filters.genre) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.genre === filters.genre);\n            }\n            \n            //order filtered plays\n            if (orderType) {\n                if (orderType === \"title\") {\n                    filteredPlays = filteredPlays.sort((a,b) => \n                                        a.title.toLowerCase() > b.title.toLowerCase());\n                }\n                else if (orderType === \"year\") {\n                    filteredPlays = filteredPlays.sort((a,b) => \n                                        Number(a.likelyDate) - Number(b.likelyDate));\n                }\n            }\n            \n            this.setState({filteredPlays: filteredPlays});\n        }\n        \n        const addToFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            \n            //prevent duplicates from being added\n            if (!favouritesCopy.find((p) => p.id === play.id)) {\n                favouritesCopy.push(play);\n            }\n            \n            this.setState({favourites:favouritesCopy});\n        }\n        \n        const removeFromFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            const index = favouritesCopy.findIndex((p) => p.id === play.id);\n            favouritesCopy.splice(index, 1);\n            this.setState({favourites:favouritesCopy});\n        }\n        \n        const savePlayData = (play, data) => {\n            const playDataCopy = cloneDeep(this.state.playData);\n            playDataCopy.push({id: play.id, data: data});\n            this.setState({playData: playDataCopy});\n        }\n        \n        return (\n            <div className=\"App\">\n                <Route path=\"/\" exact><Home setFilters={setFilters} setFilteredPlays={setFilteredPlays}/></Route>\n                <Route path=\"/play-list\" exact>\n                    <Header/>\n                    <PlayList plays={this.state.filteredPlays}\n                              favourites={this.state.favourites}\n                              filters={this.state.filters}\n                              setFilters={setFilters}\n                              setFilteredPlays={setFilteredPlays} \n                              addToFavourites={addToFavourites}\n                              removeFromFavourites={removeFromFavourites}\n                              setCurrentPlay={setCurrentPlay}\n                              genres={genres}/>\n                </Route>\n                <Route path=\"/play-detail\" exact>\n                    <Header/>\n                    <PlayDetailApp play={this.state.currentPlay}\n                                   playData={this.state.playData}\n                                   favourites={this.state.favourites}\n                                   addToFavourites={addToFavourites}\n                                   removeFromFavourites={removeFromFavourites}\n                                   savePlayData={savePlayData}/>\n                </Route>\n                <Route path=\"/about\" exact><About/></Route>\n            </div>\n        );                \n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}