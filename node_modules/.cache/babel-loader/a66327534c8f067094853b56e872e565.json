{"ast":null,"code":"var _jsxFileName = \"/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js\";\nimport React from \"react\";\nimport './App.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { Route } from 'react-router-dom';\nimport { cloneDeep, uniq } from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //set states to initial values\n\n    this.state = {\n      plays: [],\n      currentPlay: null,\n      filteredPlays: [],\n      favourites: [],\n      savedPlayData: []\n    };\n  }\n\n  async componentDidMount() {\n    //only get data if plays is empty\n    if (!this.state.plays.length) {\n      try {\n        const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({\n          plays: data\n        });\n      } catch {\n        console.error(\"fetch error\");\n      }\n    }\n  }\n\n  render() {\n    //get all genres from retrieved plays\n    const genres = [\"\"];\n    genres.push(...uniq(this.state.plays.map(p => p.genre))); //methods\n\n    const setCurrentPlay = play => {\n      this.setState({\n        currentPlay: play\n      });\n    };\n\n    const setFilteredPlays = (filters, orderType, reset) => {\n      var filteredPlays = [];\n\n      if (reset) {\n        filteredPlays = cloneDeep(this.state.plays);\n      } else {\n        filteredPlays = cloneDeep(this.state.filteredPlays);\n      } //filter by title\n\n\n      if (filters.title) {\n        filteredPlays = filteredPlays.filter(p => p.title.toLowerCase().includes(filters.title.toLowerCase()));\n      } //filter by beforeYear, if enabled\n\n\n      if (filters.before === \"on\" && filters.beforeYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate < filters.beforeYear);\n      } //filter by afterYear, if enabled\n\n\n      if (filters.after === \"on\" && filters.afterYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate > filters.afterYear);\n      } //filter by genre\n\n\n      if (filters.genre) {\n        filteredPlays = filteredPlays.filter(p => p.genre === filters.genre);\n      } //order filtered plays\n\n\n      if (orderType) {\n        if (orderType === \"title\") {\n          filteredPlays = filteredPlays.sort((a, b) => a.title.toLowerCase() > b.title.toLowerCase());\n        } else if (orderType === \"year\") {\n          filteredPlays = filteredPlays.sort((a, b) => Number(a.likelyDate) - Number(b.likelyDate));\n        }\n      } //console.log(filters);\n      //console.log(filteredPlays);\n\n\n      this.setState({\n        filteredPlays: filteredPlays\n      });\n    };\n\n    const addToFavourites = play => {\n      const favouritesCopy = [...this.state.favourites]; //prevent duplicates from being added\n\n      if (!favouritesCopy.find(p => p.id === play.id)) {\n        favouritesCopy.push(play);\n      }\n\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const removeFromFavourites = play => {\n      const favouritesCopy = [...this.state.favourites]; //get index of play and remove it\n\n      const index = favouritesCopy.findIndex(p => p.id === play.id);\n      favouritesCopy.splice(index, 1);\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const savePlayData = (play, data) => {\n      const playDataCopy = cloneDeep(this.state.savedPlayData); //save play data with corresponding id\n\n      playDataCopy.push({\n        id: play.id,\n        data: data\n      });\n      this.setState({\n        savedPlayData: playDataCopy\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(CSSTransitionGroup, {\n          transitionName: \"landing\",\n          transitionAppear: true,\n          children: /*#__PURE__*/_jsxDEV(Home, {\n            setFilteredPlays: setFilteredPlays\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-list\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CSSTransitionGroup, {\n          transitionName: \"landing\",\n          transitionAppear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayList, {\n          plays: this.state.filteredPlays,\n          favourites: this.state.favourites,\n          filters: this.state.filters,\n          setFilteredPlays: setFilteredPlays,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          setCurrentPlay: setCurrentPlay,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-detail\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CSSTransitionGroup, {\n          transitionName: \"landing\",\n          transitionAppear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayDetailApp, {\n          play: this.state.currentPlay,\n          savedPlayData: this.state.savedPlayData,\n          favourites: this.state.favourites,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          savePlayData: savePlayData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js"],"names":["React","CSSTransitionGroup","Route","cloneDeep","uniq","Header","Home","PlayList","PlayDetailApp","About","App","Component","constructor","props","state","plays","currentPlay","filteredPlays","favourites","savedPlayData","componentDidMount","length","url","response","fetch","data","json","setState","console","error","render","genres","push","map","p","genre","setCurrentPlay","play","setFilteredPlays","filters","orderType","reset","title","filter","toLowerCase","includes","before","beforeYear","likelyDate","after","afterYear","sort","a","b","Number","addToFavourites","favouritesCopy","find","id","removeFromFavourites","index","findIndex","splice","savePlayData","playDataCopy"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAAQC,kBAAR,QAAiC,wBAAjC;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,SAAR,EAAmBC,IAAnB,QAA8B,QAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE,EAAR;AACCC,MAAAA,WAAW,EAAE,IADd;AAECC,MAAAA,aAAa,EAAE,EAFhB;AAGCC,MAAAA,UAAU,EAAE,EAHb;AAICC,MAAAA,aAAa,EAAE;AAJhB,KAAb;AAKH;;AAEsB,QAAjBC,iBAAiB,GAAG;AACtB;AACA,QAAI,CAAC,KAAKN,KAAL,CAAWC,KAAX,CAAiBM,MAAtB,EAA8B;AAC1B,UAAI;AACA,cAAMC,GAAG,GAAG,sEAAZ;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,cAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,aAAKC,QAAL,CAAc;AAACZ,UAAAA,KAAK,EAAEU;AAAR,SAAd;AACH,OALD,CAMA,MAAM;AACFG,QAAAA,OAAO,CAACC,KAAR,CAAc,aAAd;AACH;AACJ;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAMC,MAAM,GAAG,CAAC,EAAD,CAAf;AACAA,IAAAA,MAAM,CAACC,IAAP,CAAY,GAAG5B,IAAI,CAAC,KAAKU,KAAL,CAAWC,KAAX,CAAiBkB,GAAjB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,KAA9B,CAAD,CAAnB,EAHK,CAKL;;AACA,UAAMC,cAAc,GAAIC,IAAD,IAAU;AAC7B,WAAKV,QAAL,CAAc;AAACX,QAAAA,WAAW,EAAEqB;AAAd,OAAd;AACH,KAFD;;AAIA,UAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUC,SAAV,EAAqBC,KAArB,KAA+B;AACpD,UAAIxB,aAAa,GAAG,EAApB;;AAEA,UAAIwB,KAAJ,EAAW;AACPxB,QAAAA,aAAa,GAAGd,SAAS,CAAC,KAAKW,KAAL,CAAWC,KAAZ,CAAzB;AACH,OAFD,MAGK;AACDE,QAAAA,aAAa,GAAGd,SAAS,CAAC,KAAKW,KAAL,CAAWG,aAAZ,CAAzB;AACH,OARmD,CAUpD;;;AACA,UAAIsB,OAAO,CAACG,KAAZ,EAAmB;AACfzB,QAAAA,aAAa,GAAGA,aAAa,CAAC0B,MAAd,CAAsBT,CAAD,IACjBA,CAAC,CAACQ,KAAF,CAAQE,WAAR,GAAsBC,QAAtB,CAA+BN,OAAO,CAACG,KAAR,CAAcE,WAAd,EAA/B,CADJ,CAAhB;AAEH,OAdmD,CAgBpD;;;AACA,UAAKL,OAAO,CAACO,MAAR,KAAmB,IAApB,IAA6BP,OAAO,CAACQ,UAAzC,EAAqD;AACjD9B,QAAAA,aAAa,GAAGA,aAAa,CAAC0B,MAAd,CAAsBT,CAAD,IACjBA,CAAC,CAACc,UAAF,GAAeT,OAAO,CAACQ,UAD3B,CAAhB;AAEH,OApBmD,CAsBpD;;;AACA,UAAKR,OAAO,CAACU,KAAR,KAAkB,IAAnB,IAA4BV,OAAO,CAACW,SAAxC,EAAmD;AAC/CjC,QAAAA,aAAa,GAAGA,aAAa,CAAC0B,MAAd,CAAsBT,CAAD,IACjBA,CAAC,CAACc,UAAF,GAAeT,OAAO,CAACW,SAD3B,CAAhB;AAEH,OA1BmD,CA4BpD;;;AACA,UAAIX,OAAO,CAACJ,KAAZ,EAAmB;AACflB,QAAAA,aAAa,GAAGA,aAAa,CAAC0B,MAAd,CAAsBT,CAAD,IACjBA,CAAC,CAACC,KAAF,KAAYI,OAAO,CAACJ,KADxB,CAAhB;AAEH,OAhCmD,CAkCpD;;;AACA,UAAIK,SAAJ,EAAe;AACX,YAAIA,SAAS,KAAK,OAAlB,EAA2B;AACvBvB,UAAAA,aAAa,GAAGA,aAAa,CAACkC,IAAd,CAAmB,CAACC,CAAD,EAAGC,CAAH,KACfD,CAAC,CAACV,KAAF,CAAQE,WAAR,KAAwBS,CAAC,CAACX,KAAF,CAAQE,WAAR,EAD5B,CAAhB;AAEH,SAHD,MAIK,IAAIJ,SAAS,KAAK,MAAlB,EAA0B;AAC3BvB,UAAAA,aAAa,GAAGA,aAAa,CAACkC,IAAd,CAAmB,CAACC,CAAD,EAAGC,CAAH,KACfC,MAAM,CAACF,CAAC,CAACJ,UAAH,CAAN,GAAuBM,MAAM,CAACD,CAAC,CAACL,UAAH,CADjC,CAAhB;AAEH;AACJ,OA5CmD,CA8CpD;AACA;;;AACA,WAAKrB,QAAL,CAAc;AAACV,QAAAA,aAAa,EAAEA;AAAhB,OAAd;AACH,KAjDD;;AAmDA,UAAMsC,eAAe,GAAIlB,IAAD,IAAU;AAC9B,YAAMmB,cAAc,GAAG,CAAC,GAAG,KAAK1C,KAAL,CAAWI,UAAf,CAAvB,CAD8B,CAG9B;;AACA,UAAI,CAACsC,cAAc,CAACC,IAAf,CAAqBvB,CAAD,IAAOA,CAAC,CAACwB,EAAF,KAASrB,IAAI,CAACqB,EAAzC,CAAL,EAAmD;AAC/CF,QAAAA,cAAc,CAACxB,IAAf,CAAoBK,IAApB;AACH;;AAED,WAAKV,QAAL,CAAc;AAACT,QAAAA,UAAU,EAAEsC;AAAb,OAAd;AACH,KATD;;AAWA,UAAMG,oBAAoB,GAAItB,IAAD,IAAU;AACnC,YAAMmB,cAAc,GAAG,CAAC,GAAG,KAAK1C,KAAL,CAAWI,UAAf,CAAvB,CADmC,CAEnC;;AACA,YAAM0C,KAAK,GAAGJ,cAAc,CAACK,SAAf,CAA0B3B,CAAD,IAAOA,CAAC,CAACwB,EAAF,KAASrB,IAAI,CAACqB,EAA9C,CAAd;AACAF,MAAAA,cAAc,CAACM,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B;AACA,WAAKjC,QAAL,CAAc;AAACT,QAAAA,UAAU,EAAEsC;AAAb,OAAd;AACH,KAND;;AAQA,UAAMO,YAAY,GAAG,CAAC1B,IAAD,EAAOZ,IAAP,KAAgB;AACjC,YAAMuC,YAAY,GAAG7D,SAAS,CAAC,KAAKW,KAAL,CAAWK,aAAZ,CAA9B,CADiC,CAEjC;;AACA6C,MAAAA,YAAY,CAAChC,IAAb,CAAkB;AAAC0B,QAAAA,EAAE,EAAErB,IAAI,CAACqB,EAAV;AAAcjC,QAAAA,IAAI,EAAEA;AAApB,OAAlB;AACA,WAAKE,QAAL,CAAc;AAACR,QAAAA,aAAa,EAAE6C;AAAhB,OAAd;AACH,KALD;;AAOA,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAA,+BACI,QAAC,kBAAD;AAAoB,UAAA,cAAc,EAAC,SAAnC;AAA6C,UAAA,gBAAgB,EAAE,IAA/D;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,gBAAgB,EAAE1B;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,KAAK,MAA9B;AAAA,gCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,kBAAD;AAAoB,UAAA,cAAc,EAAC,SAAnC;AAA6C,UAAA,gBAAgB,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAII,QAAC,QAAD;AAAU,UAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWG,aAA5B;AACU,UAAA,UAAU,EAAE,KAAKH,KAAL,CAAWI,UADjC;AAEU,UAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWyB,OAF9B;AAGU,UAAA,gBAAgB,EAAED,gBAH5B;AAIU,UAAA,eAAe,EAAEiB,eAJ3B;AAKU,UAAA,oBAAoB,EAAEI,oBALhC;AAMU,UAAA,cAAc,EAAEvB,cAN1B;AAOU,UAAA,MAAM,EAAEL;AAPlB;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAmBI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,cAAZ;AAA2B,QAAA,KAAK,MAAhC;AAAA,gCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,kBAAD;AAAoB,UAAA,cAAc,EAAC,SAAnC;AAA6C,UAAA,gBAAgB,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAII,QAAC,aAAD;AAAe,UAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWE,WAAhC;AACe,UAAA,aAAa,EAAE,KAAKF,KAAL,CAAWK,aADzC;AAEe,UAAA,UAAU,EAAE,KAAKL,KAAL,CAAWI,UAFtC;AAGe,UAAA,eAAe,EAAEqC,eAHhC;AAIe,UAAA,oBAAoB,EAAEI,oBAJrC;AAKe,UAAA,YAAY,EAAEI;AAL7B;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,eA8BI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,MAA1B;AAAA,gCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqCH;;AAtJ6B;;AAyJlC,eAAerD,GAAf","sourcesContent":["import React from \"react\";\nimport './App.css';\nimport {CSSTransitionGroup} from 'react-transition-group'\nimport {Route} from 'react-router-dom';\nimport {cloneDeep, uniq} from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        //set states to initial values\n        this.state = {plays: [],\n                      currentPlay: null,\n                      filteredPlays: [],\n                      favourites: [],\n                      savedPlayData: []};\n    }\n                            \n    async componentDidMount() {\n        //only get data if plays is empty\n        if (!this.state.plays.length) {\n            try {\n                const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n                const response = await fetch(url);\n                const data = await response.json();\n                this.setState({plays: data});\n            } \n            catch {\n                console.error(\"fetch error\");\n            }\n        }\n    }\n    \n    render() {\n        //get all genres from retrieved plays\n        const genres = [\"\"];\n        genres.push(...uniq(this.state.plays.map((p) => p.genre)));\n              \n        //methods\n        const setCurrentPlay = (play) => {\n            this.setState({currentPlay: play});\n        }\n        \n        const setFilteredPlays = (filters, orderType, reset) => {\n            var filteredPlays = []; \n            \n            if (reset) {\n                filteredPlays = cloneDeep(this.state.plays);\n            }\n            else {\n                filteredPlays = cloneDeep(this.state.filteredPlays);\n            }\n            \n            //filter by title\n            if (filters.title) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.title.toLowerCase().includes(filters.title.toLowerCase()));\n            }\n            \n            //filter by beforeYear, if enabled\n            if ((filters.before === \"on\") && filters.beforeYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate < filters.beforeYear);\n            }\n            \n            //filter by afterYear, if enabled\n            if ((filters.after === \"on\") && filters.afterYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate > filters.afterYear);\n            }\n            \n            //filter by genre\n            if (filters.genre) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.genre === filters.genre);\n            }\n            \n            //order filtered plays\n            if (orderType) {\n                if (orderType === \"title\") {\n                    filteredPlays = filteredPlays.sort((a,b) => \n                                        a.title.toLowerCase() > b.title.toLowerCase());\n                }\n                else if (orderType === \"year\") {\n                    filteredPlays = filteredPlays.sort((a,b) => \n                                        Number(a.likelyDate) - Number(b.likelyDate));\n                }\n            }\n            \n            //console.log(filters);\n            //console.log(filteredPlays);\n            this.setState({filteredPlays: filteredPlays});\n        }\n        \n        const addToFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            \n            //prevent duplicates from being added\n            if (!favouritesCopy.find((p) => p.id === play.id)) {\n                favouritesCopy.push(play);\n            }\n            \n            this.setState({favourites: favouritesCopy});\n        }\n        \n        const removeFromFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            //get index of play and remove it\n            const index = favouritesCopy.findIndex((p) => p.id === play.id);\n            favouritesCopy.splice(index, 1);\n            this.setState({favourites: favouritesCopy});\n        }\n        \n        const savePlayData = (play, data) => {\n            const playDataCopy = cloneDeep(this.state.savedPlayData);\n            //save play data with corresponding id\n            playDataCopy.push({id: play.id, data: data});\n            this.setState({savedPlayData: playDataCopy});\n        }\n        \n        return (\n            <div className=\"app\">\n                <Route path=\"/\" exact>\n                    <CSSTransitionGroup transitionName=\"landing\" transitionAppear={true}>\n                        <Home setFilteredPlays={setFilteredPlays}/>\n                    </CSSTransitionGroup>\n                </Route>\n                <Route path=\"/play-list\" exact>\n                    <Header/>\n                    <CSSTransitionGroup transitionName=\"landing\" transitionAppear={true}>\n                    </CSSTransitionGroup>\n                    <PlayList plays={this.state.filteredPlays}\n                              favourites={this.state.favourites}\n                              filters={this.state.filters}\n                              setFilteredPlays={setFilteredPlays} \n                              addToFavourites={addToFavourites}\n                              removeFromFavourites={removeFromFavourites}\n                              setCurrentPlay={setCurrentPlay}\n                              genres={genres}/>\n                </Route>\n                <Route path=\"/play-detail\" exact>\n                    <Header/>\n                    <CSSTransitionGroup transitionName=\"landing\" transitionAppear={true}>\n                    </CSSTransitionGroup>\n                    <PlayDetailApp play={this.state.currentPlay}\n                                   savedPlayData={this.state.savedPlayData}\n                                   favourites={this.state.favourites}\n                                   addToFavourites={addToFavourites}\n                                   removeFromFavourites={removeFromFavourites}\n                                   savePlayData={savePlayData}/>\n                </Route>\n                <Route path=\"/about\" exact>\n                    <Header/>\n                    <About/>\n                </Route>\n            </div>\n        );                \n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}