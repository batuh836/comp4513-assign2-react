{"ast":null,"code":"var _jsxFileName = \"/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js\";\nimport React from \"react\";\nimport './App.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { Route } from 'react-router-dom';\nimport { cloneDeep, uniq } from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //set states to initial values\n\n    this.state = {\n      plays: [],\n      currentPlay: null,\n      filteredPlays: [],\n      favourites: [],\n      savedPlayData: [],\n      modalIsOpen: false\n    };\n  }\n\n  async componentDidMount() {\n    //only get data if plays is empty\n    if (!this.state.plays.length) {\n      try {\n        const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({\n          plays: data\n        });\n        this.setState({\n          filteredPlays: data\n        });\n      } catch {\n        console.error(\"fetch error\");\n      }\n    }\n  }\n\n  render() {\n    //get all genres from retrieved plays\n    const genres = [\"\"];\n    genres.push(...uniq(this.state.plays.map(p => p.genre))); //methods\n\n    const setCurrentPlay = play => {\n      this.setState({\n        currentPlay: play\n      });\n    };\n\n    const toggleModal = () => {\n      if (this.state.modalIsOpen) {\n        this.setState({\n          modalIsOpen: false\n        });\n      } else {\n        this.setState({\n          modalIsOpen: true\n        });\n      }\n    };\n\n    const setFilteredPlays = (filters, orderType, reset) => {\n      var filteredPlays = reset ? cloneDeep(this.state.plays) : cloneDeep(this.state.filteredPlays); //filter by title\n\n      if (filters.title) {\n        filteredPlays = filteredPlays.filter(p => p.title.toLowerCase().includes(filters.title.toLowerCase()));\n      } //filter by beforeYear, if enabled\n\n\n      if (filters.before && filters.beforeYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate < filters.beforeYear);\n      } //filter by afterYear, if enabled\n\n\n      if (filters.after && filters.afterYear) {\n        filteredPlays = filteredPlays.filter(p => p.likelyDate > filters.afterYear);\n      } //filter by genre\n\n\n      if (filters.genre) {\n        filteredPlays = filteredPlays.filter(p => p.genre === filters.genre);\n      } //order filtered plays\n\n\n      if (orderType) {\n        if (orderType === \"title\") {\n          filteredPlays = filteredPlays.sort((a, b) => {\n            let aTitle = a.title.toLowerCase();\n            let bTitle = b.title.toLowerCase();\n\n            if (aTitle > bTitle) {\n              return 1;\n            } else if (aTitle < bTitle) {\n              return -1;\n            } else {\n              return 0;\n            }\n          });\n        } else if (orderType === \"year\") {\n          filteredPlays = filteredPlays.sort((a, b) => Number(a.likelyDate) - Number(b.likelyDate));\n        }\n      } //            console.log(filters);\n      //            console.log(filteredPlays);\n\n\n      this.setState({\n        filteredPlays: filteredPlays\n      });\n    };\n\n    const addToFavourites = play => {\n      const favouritesCopy = [...this.state.favourites]; //prevent duplicates from being added\n\n      if (!favouritesCopy.find(p => p.id === play.id)) {\n        favouritesCopy.push(play);\n      }\n\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const removeFromFavourites = play => {\n      const favouritesCopy = [...this.state.favourites]; //get index of play and remove it\n\n      const index = favouritesCopy.findIndex(p => p.id === play.id);\n      favouritesCopy.splice(index, 1);\n      this.setState({\n        favourites: favouritesCopy\n      });\n    };\n\n    const savePlayData = (play, data) => {\n      const playDataCopy = cloneDeep(this.state.savedPlayData); //save play data with corresponding id\n\n      playDataCopy.push({\n        id: play.id,\n        data: data\n      });\n      this.setState({\n        savedPlayData: playDataCopy\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(CSSTransitionGroup, {\n          transitionName: \"landing\",\n          transitionAppear: true,\n          transitionAppearTimeout: 500,\n          transitionEnterTimeout: 500,\n          transitionLeaveTimeout: 500,\n          children: /*#__PURE__*/_jsxDEV(Home, {\n            setFilteredPlays: setFilteredPlays\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-list\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          toggleModal: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayList, {\n          plays: this.state.filteredPlays,\n          favourites: this.state.favourites,\n          filters: this.state.filters,\n          setFilteredPlays: setFilteredPlays,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          setCurrentPlay: setCurrentPlay,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/play-detail\",\n        exact: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          toggleModal: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PlayDetailApp, {\n          play: this.state.currentPlay,\n          savedPlayData: this.state.savedPlayData,\n          favourites: this.state.favourites,\n          addToFavourites: addToFavourites,\n          removeFromFavourites: removeFromFavourites,\n          savePlayData: savePlayData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(About, {\n        modalIsOpen: this.state.modalIsOpen,\n        toggleModal: toggleModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Guild/Documents/Local_School/COMP_4533/assignment_1/my-app/src/App.js"],"names":["React","CSSTransitionGroup","Route","cloneDeep","uniq","Header","Home","PlayList","PlayDetailApp","About","App","Component","constructor","props","state","plays","currentPlay","filteredPlays","favourites","savedPlayData","modalIsOpen","componentDidMount","length","url","response","fetch","data","json","setState","console","error","render","genres","push","map","p","genre","setCurrentPlay","play","toggleModal","setFilteredPlays","filters","orderType","reset","title","filter","toLowerCase","includes","before","beforeYear","likelyDate","after","afterYear","sort","a","b","aTitle","bTitle","Number","addToFavourites","favouritesCopy","find","id","removeFromFavourites","index","findIndex","splice","savePlayData","playDataCopy"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css';\nimport {CSSTransitionGroup} from 'react-transition-group';\nimport {Route} from 'react-router-dom';\nimport {cloneDeep, uniq} from 'lodash';\nimport Header from \"./components/Header.js\";\nimport Home from \"./components/Home.js\";\nimport PlayList from \"./components/PlayList.js\";\nimport PlayDetailApp from \"./components/PlayDetailApp.js\";\nimport About from \"./components/About.js\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        //set states to initial values\n        this.state = {plays: [],\n                      currentPlay: null,\n                      filteredPlays: [],\n                      favourites: [],\n                      savedPlayData: [],\n                      modalIsOpen: false};\n    }\n                            \n    async componentDidMount() {\n        //only get data if plays is empty\n        if (!this.state.plays.length) {\n            try {\n                const url = \"http://www.randyconnolly.com//funwebdev/3rd/api/shakespeare/list.php\";\n                const response = await fetch(url);\n                const data = await response.json();\n                this.setState({plays: data});\n                this.setState({filteredPlays: data});\n            } \n            catch {\n                console.error(\"fetch error\");\n            }\n        }\n    }\n    \n    render() {\n        //get all genres from retrieved plays\n        const genres = [\"\"];\n        genres.push(...uniq(this.state.plays.map((p) => p.genre)));\n              \n        //methods\n        const setCurrentPlay = (play) => {\n            this.setState({currentPlay: play});\n        }\n        \n        const toggleModal = () => {\n            if (this.state.modalIsOpen) {\n                this.setState({modalIsOpen: false});\n            }\n            else {\n                this.setState({modalIsOpen: true});\n            }\n        }\n        \n        const setFilteredPlays = (filters, orderType, reset) => {\n            var filteredPlays = reset ? cloneDeep(this.state.plays) : cloneDeep(this.state.filteredPlays); \n            \n            //filter by title\n            if (filters.title) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.title.toLowerCase().includes(filters.title.toLowerCase()));\n            }\n            \n            //filter by beforeYear, if enabled\n            if ((filters.before) && filters.beforeYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate < filters.beforeYear);\n            }\n            \n            //filter by afterYear, if enabled\n            if ((filters.after) && filters.afterYear) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.likelyDate > filters.afterYear);\n            }\n            \n            //filter by genre\n            if (filters.genre) {\n                filteredPlays = filteredPlays.filter((p) => \n                                    p.genre === filters.genre);\n            }\n            \n            //order filtered plays\n            if (orderType) {\n                if (orderType === \"title\") {\n                    filteredPlays = filteredPlays.sort((a,b) => {\n                                        let aTitle = a.title.toLowerCase();\n                                        let bTitle = b.title.toLowerCase(); \n                                        if (aTitle > bTitle) {return 1}\n                                        else if (aTitle < bTitle) {return -1}\n                                        else {return 0}\n                                    });\n                }\n                else if (orderType === \"year\") {\n                    filteredPlays = filteredPlays.sort((a,b) => \n                                        Number(a.likelyDate) - Number(b.likelyDate));\n                }\n            }\n            \n//            console.log(filters);\n//            console.log(filteredPlays);\n            this.setState({filteredPlays: filteredPlays});\n        }\n        \n        const addToFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            \n            //prevent duplicates from being added\n            if (!favouritesCopy.find((p) => p.id === play.id)) {\n                favouritesCopy.push(play);\n            }\n            \n            this.setState({favourites: favouritesCopy});\n        }\n        \n        const removeFromFavourites = (play) => {\n            const favouritesCopy = [...this.state.favourites];\n            //get index of play and remove it\n            const index = favouritesCopy.findIndex((p) => p.id === play.id);\n            favouritesCopy.splice(index, 1);\n            this.setState({favourites: favouritesCopy});\n        }\n        \n        const savePlayData = (play, data) => {\n            const playDataCopy = cloneDeep(this.state.savedPlayData);\n            //save play data with corresponding id\n            playDataCopy.push({id: play.id, data: data});\n            this.setState({savedPlayData: playDataCopy});\n        }\n        \n        return (\n            <div className=\"app\">\n                <Route path=\"/\" exact>\n                    <CSSTransitionGroup transitionName=\"landing\" \n                                        transitionAppear={true} \n                                        transitionAppearTimeout={500}\n                                        transitionEnterTimeout={500} \n                                        transitionLeaveTimeout={500}>\n                        <Home setFilteredPlays={setFilteredPlays}/>\n                    </CSSTransitionGroup>\n                </Route>\n                <Route path=\"/play-list\" exact>\n                    <Header toggleModal={toggleModal}/>\n                    <PlayList plays={this.state.filteredPlays}\n                              favourites={this.state.favourites}\n                              filters={this.state.filters}\n                              setFilteredPlays={setFilteredPlays} \n                              addToFavourites={addToFavourites}\n                              removeFromFavourites={removeFromFavourites}\n                              setCurrentPlay={setCurrentPlay}\n                              genres={genres}/>\n                </Route>\n                <Route path=\"/play-detail\" exact>\n                    <Header toggleModal={toggleModal}/>\n                    <PlayDetailApp play={this.state.currentPlay}\n                                   savedPlayData={this.state.savedPlayData}\n                                   favourites={this.state.favourites}\n                                   addToFavourites={addToFavourites}\n                                   removeFromFavourites={removeFromFavourites}\n                                   savePlayData={savePlayData}/>\n                </Route>\n                <About modalIsOpen={this.state.modalIsOpen} toggleModal={toggleModal}/>\n            </div>\n        );                \n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}